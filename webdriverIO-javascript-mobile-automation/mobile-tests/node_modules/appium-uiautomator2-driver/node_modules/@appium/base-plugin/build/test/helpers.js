"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.e2eSetup = e2eSetup;

require("source-map-support/register");

var _support = require("@appium/support");

var _appium = require("appium");

var _getPort = _interopRequireDefault(require("get-port"));

var _logSymbols = require("log-symbols");

var _teen_process = require("teen_process");

const APPIUM_BIN = require.resolve('appium');

function e2eSetup(opts) {
  let {
    appiumHome,
    before,
    after,
    serverArgs = {},
    driverSource,
    driverPackage,
    driverName,
    driverSpec,
    pluginSource,
    pluginPackage,
    pluginSpec,
    pluginName,
    port,
    host
  } = opts;
  let server;
  before(async function () {
    const setupAppiumHome = async () => {
      const env = { ...process.env
      };

      if (appiumHome) {
        env.APPIUM_HOME = appiumHome;
        await _support.fs.mkdirp(appiumHome);
        console.log(`${_logSymbols.info} Set \`APPIUM_HOME\` to ${appiumHome}`);
      }

      return env;
    };

    const installDriver = async env => {
      var _installedDrivers$dri;

      console.log(`${_logSymbols.info} Checking if driver "${driverName}" is installed...`);
      const driverListArgs = [APPIUM_BIN, 'driver', 'list', '--json'];
      console.log(`${_logSymbols.info} Running: ${process.execPath} ${driverListArgs.join(' ')}`);
      const {
        stdout: driverListJson
      } = await (0, _teen_process.exec)(process.execPath, driverListArgs, {
        env
      });
      const installedDrivers = JSON.parse(driverListJson);

      if (!((_installedDrivers$dri = installedDrivers[driverName]) !== null && _installedDrivers$dri !== void 0 && _installedDrivers$dri.installed)) {
        console.log(`${_logSymbols.warning} Driver "${driverName}" not installed; installing...`);
        const driverArgs = [APPIUM_BIN, 'driver', 'install', '--source', driverSource, driverSpec];

        if (driverPackage) {
          driverArgs.push('--package', driverPackage);
        }

        console.log(`${_logSymbols.info} Running: ${process.execPath} ${driverArgs.join(' ')}`);
        await (0, _teen_process.exec)(process.execPath, driverArgs, {
          env
        });
      }

      console.log(`${_logSymbols.success} Installed driver "${driverName}"`);
    };

    const installPlugin = async env => {
      var _installedPlugins$plu;

      console.log(`${_logSymbols.info} Checking if plugin "${pluginName}" is installed...`);
      const pluginListArgs = [APPIUM_BIN, 'plugin', 'list', '--json'];
      const {
        stdout: pluginListJson
      } = await (0, _teen_process.exec)(process.execPath, pluginListArgs, {
        env
      });
      const installedPlugins = JSON.parse(pluginListJson);

      if (!((_installedPlugins$plu = installedPlugins[pluginName]) !== null && _installedPlugins$plu !== void 0 && _installedPlugins$plu.installed)) {
        console.log(`${_logSymbols.warning} Plugin "${pluginName}" not installed; installing...`);
        const pluginArgs = [APPIUM_BIN, 'plugin', 'install', '--source', pluginSource, pluginSpec];

        if (pluginPackage) {
          pluginArgs.push('--package', pluginPackage);
        }

        console.log(`${_logSymbols.info} Running: ${process.execPath} ${pluginArgs.join(' ')}`);
        await (0, _teen_process.exec)(process.execPath, pluginArgs, {
          env
        });
      }

      console.log(`${_logSymbols.success} Installed plugin "${pluginName}"`);
    };

    const createServer = async () => {
      if (!port) {
        port = await (0, _getPort.default)();
      }

      console.log(`${_logSymbols.info} Will use port ${port} for Appium server`);
      this.port = port;
      const args = {
        port,
        address: host,
        usePlugins: [pluginName],
        useDrivers: [driverName],
        appiumHome,
        ...serverArgs
      };
      server = await (0, _appium.main)(args);
    };

    const env = await setupAppiumHome();
    await installDriver(env);
    await installPlugin(env);
    await createServer();
  });
  after(async function () {
    if (server) {
      await server.close();
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,