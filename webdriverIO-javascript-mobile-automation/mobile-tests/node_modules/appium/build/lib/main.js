#!/usr/bin/env node
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "finalizeSchema", {
  enumerable: true,
  get: function () {
    return _schema.finalizeSchema;
  }
});
Object.defineProperty(exports, "getSchema", {
  enumerable: true,
  get: function () {
    return _schema.getSchema;
  }
});
exports.init = init;
exports.main = main;
Object.defineProperty(exports, "readConfigFile", {
  enumerable: true,
  get: function () {
    return _configFile.readConfigFile;
  }
});
exports.resolveAppiumHome = void 0;
Object.defineProperty(exports, "validate", {
  enumerable: true,
  get: function () {
    return _schema.validate;
  }
});

require("source-map-support/register");

var _logsink = require("./logsink");

var _logger = _interopRequireDefault(require("./logger"));

var _baseDriver = require("@appium/base-driver");

var _support = require("@appium/support");

var _asyncbox = require("asyncbox");

var _lodash = _interopRequireDefault(require("lodash"));

var _appium = require("./appium");

var _extension = require("./cli/extension");

var _parser = require("./cli/parser");

var _config = require("./config");

var _configFile = require("./config-file");

var _extension2 = require("./extension");

var _constants = require("./constants");

var _gridRegister = _interopRequireDefault(require("./grid-register"));

var _schema = require("./schema/schema");

var _utils = require("./utils");

const {
  resolveAppiumHome
} = _support.env;
exports.resolveAppiumHome = resolveAppiumHome;

async function preflightChecks(args, throwInsteadOfExit = false) {
  try {
    (0, _config.checkNodeOk)();

    if (args.longStacktrace) {
      require('longjohn').async_trace_limit = -1;
    }

    if (args.showBuildInfo) {
      await (0, _config.showBuildInfo)();
      process.exit(0);
    }

    (0, _config.warnNodeDeprecations)();
    (0, _schema.validate)(args);

    if (args.tmpDir) {
      await (0, _config.validateTmpDir)(args.tmpDir);
    }
  } catch (err) {
    _logger.default.error(err.message.red);

    if (throwInsteadOfExit) {
      throw err;
    }

    process.exit(1);
  }
}

function logNonDefaultArgsWarning(args) {
  _logger.default.info('Non-default server args:');

  (0, _utils.inspect)(args);
}

function logDefaultCapabilitiesWarning(caps) {
  _logger.default.info('Default capabilities, which will be added to each request ' + 'unless overridden by desired capabilities:');

  (0, _utils.inspect)(caps);
}

async function logStartupInfo(args) {
  let welcome = `Welcome to Appium v${_config.APPIUM_VER}`;
  let appiumRev = await (0, _config.getGitRev)();

  if (appiumRev) {
    welcome += ` (REV ${appiumRev})`;
  }

  _logger.default.info(welcome);

  let showArgs = (0, _config.getNonDefaultServerArgs)(args);

  if (_lodash.default.size(showArgs)) {
    logNonDefaultArgsWarning(showArgs);
  }

  if (!_lodash.default.isEmpty(args.defaultCapabilities)) {
    logDefaultCapabilitiesWarning(args.defaultCapabilities);
  }
}

function logServerPort(address, port) {
  let logMessage = `Appium REST http interface listener started on ` + `${address}:${port}`;

  _logger.default.info(logMessage);
}

function getServerUpdaters(driverClasses, pluginClasses) {
  return _lodash.default.compact(_lodash.default.map([...driverClasses.keys(), ...pluginClasses.keys()], 'updateServer'));
}

function getExtraMethodMap(driverClasses, pluginClasses) {
  return [...driverClasses.keys(), ...pluginClasses.keys()].reduce((map, klass) => {
    var _klass$newMethodMap;

    return { ...map,
      ...((_klass$newMethodMap = klass.newMethodMap) !== null && _klass$newMethodMap !== void 0 ? _klass$newMethodMap : {})
    };
  }, {});
}

function areServerCommandArgs(args) {
  return args.subcommand === _constants.SERVER_SUBCOMMAND;
}

async function init(args) {
  var _args$appiumHome;

  const appiumHome = (_args$appiumHome = args === null || args === void 0 ? void 0 : args.appiumHome) !== null && _args$appiumHome !== void 0 ? _args$appiumHome : await resolveAppiumHome();
  const {
    driverConfig,
    pluginConfig
  } = await (0, _extension2.loadExtensions)(appiumHome);
  const parser = (0, _parser.getParser)();
  let throwInsteadOfExit = false;
  let preConfigArgs;

  if (args) {
    var _args$subcommand;

    if (args.throwInsteadOfExit) {
      throwInsteadOfExit = true;
      delete args.throwInsteadOfExit;
    }

    preConfigArgs = { ...args,
      subcommand: (_args$subcommand = args.subcommand) !== null && _args$subcommand !== void 0 ? _args$subcommand : _constants.SERVER_SUBCOMMAND
    };
  } else {
    preConfigArgs = parser.parseArgs();
  }

  const configResult = await (0, _configFile.readConfigFile)(preConfigArgs.configFile);

  if (!_lodash.default.isEmpty(configResult.errors)) {
    var _configResult$reason;

    throw new Error(`Errors in config file ${configResult.filepath}:\n ${(_configResult$reason = configResult.reason) !== null && _configResult$reason !== void 0 ? _configResult$reason : configResult.errors}`);
  }

  if (!areServerCommandArgs(preConfigArgs)) {
    if (preConfigArgs.subcommand === _constants.DRIVER_TYPE) {
      await (0, _extension.runExtensionCommand)(preConfigArgs, driverConfig);
      return {};
    }

    if (preConfigArgs.subcommand === _constants.PLUGIN_TYPE) {
      await (0, _extension.runExtensionCommand)(preConfigArgs, pluginConfig);
      return {};
    }

    return {};
  } else {
    var _configResult$config;

    const defaults = (0, _schema.getDefaultsForSchema)(false);

    const serverArgs = _lodash.default.defaultsDeep(preConfigArgs, (_configResult$config = configResult.config) === null || _configResult$config === void 0 ? void 0 : _configResult$config.server, defaults);

    if (preConfigArgs.showConfig) {
      (0, _config.showConfig)((0, _config.getNonDefaultServerArgs)(preConfigArgs), configResult, defaults, serverArgs);
      return {};
    }

    await (0, _logsink.init)(serverArgs);

    if (serverArgs.logFilters) {
      const {
        issues,
        rules
      } = await _support.logger.loadSecureValuesPreprocessingRules(serverArgs.logFilters);

      if (!_lodash.default.isEmpty(issues)) {
        throw new Error(`The log filtering rules config '${serverArgs.logFilters}' has issues: ` + JSON.stringify(issues, null, 2));
      }

      if (_lodash.default.isEmpty(rules)) {
        _logger.default.warn(`Found no log filtering rules in '${serverArgs.logFilters}'. Is that expected?`);
      } else {
        _logger.default.info(`Loaded ${_support.util.pluralize('filtering rule', rules.length, true)} from '${serverArgs.logFilters}'`);
      }
    }

    const appiumDriver = new _appium.AppiumDriver(serverArgs);
    appiumDriver.driverConfig = driverConfig;
    await preflightChecks(serverArgs, throwInsteadOfExit);
    return {
      appiumDriver,
      parsedArgs: serverArgs,
      driverConfig,
      pluginConfig
    };
  }
}

async function main(args) {
  const {
    appiumDriver,
    parsedArgs,
    pluginConfig,
    driverConfig
  } = await init(args);

  if (!appiumDriver || !parsedArgs || !pluginConfig || !driverConfig) {
    return;
  }

  const pluginClasses = (0, _extension2.getActivePlugins)(pluginConfig, parsedArgs.usePlugins);
  appiumDriver.pluginClasses = pluginClasses;
  await logStartupInfo(parsedArgs);
  let routeConfiguringFunction = (0, _baseDriver.routeConfiguringFunction)(appiumDriver);
  const driverClasses = (0, _extension2.getActiveDrivers)(driverConfig, parsedArgs.useDrivers);
  const serverUpdaters = getServerUpdaters(driverClasses, pluginClasses);
  const extraMethodMap = getExtraMethodMap(driverClasses, pluginClasses);
  const serverOpts = {
    routeConfiguringFunction,
    port: parsedArgs.port,
    hostname: parsedArgs.address,
    allowCors: parsedArgs.allowCors,
    basePath: parsedArgs.basePath,
    serverUpdaters,
    extraMethodMap
  };

  if (parsedArgs.keepAliveTimeout) {
    serverOpts.keepAliveTimeout = parsedArgs.keepAliveTimeout * 1000;
  }

  let server;

  try {
    server = await (0, _baseDriver.server)(serverOpts);
  } catch (err) {
    _logger.default.error(`Could not configure Appium server. It's possible that a driver or plugin tried ` + `to update the server and failed. Original error: ${err.message}`);

    _logger.default.debug(err.stack);

    return process.exit(1);
  }

  if (parsedArgs.allowCors) {
    _logger.default.warn('You have enabled CORS requests from any host. Be careful not ' + 'to visit sites which could maliciously try to start Appium ' + 'sessions on your machine');
  }

  appiumDriver.server = server;

  try {
    if (parsedArgs.nodeconfig) {
      await (0, _gridRegister.default)(parsedArgs.nodeconfig, parsedArgs.address, parsedArgs.port, parsedArgs.basePath);
    }
  } catch (err) {
    await server.close();
    throw err;
  }

  for (const signal of ['SIGINT', 'SIGTERM']) {
    process.once(signal, async function onSignal() {
      _logger.default.info(`Received ${signal} - shutting down`);

      try {
        await appiumDriver.deleteAllSessions({
          force: true,
          reason: `The process has received ${signal} signal`
        });
        await server.close();
        process.exit(0);
      } catch (e) {
        _logger.default.warn(e);

        process.exit(1);
      }
    });
  }

  logServerPort(parsedArgs.address, parsedArgs.port);
  driverConfig.print();
  pluginConfig.print([...pluginClasses.values()]);
  return server;
}

if (require.main === module) {
  (0, _asyncbox.asyncify)(main);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,