"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.commandClasses = void 0;
exports.runExtensionCommand = runExtensionCommand;

require("source-map-support/register");

var _driverCommand = _interopRequireDefault(require("./driver-command"));

var _pluginCommand = _interopRequireDefault(require("./plugin-command"));

var _constants = require("../constants");

var _utils = require("./utils");

const commandClasses = Object.freeze({
  [_constants.DRIVER_TYPE]: _driverCommand.default,
  [_constants.PLUGIN_TYPE]: _pluginCommand.default
});
exports.commandClasses = commandClasses;

async function runExtensionCommand(args, config) {
  let jsonResult = null;
  const {
    extensionType: type
  } = config;
  const extCmd = args[`${type}Command`];

  if (!extCmd) {
    throw new TypeError(`Cannot call ${type} command without a subcommand like 'install'`);
  }

  let {
    json,
    suppressOutput
  } = args;

  if (suppressOutput) {
    json = true;
  }

  const CommandClass = commandClasses[type];
  const cmd = new CommandClass({
    config,
    json
  });

  try {
    jsonResult = await cmd.execute(args);
  } catch (err) {
    if (suppressOutput) {
      throw err;
    }

    (0, _utils.errAndQuit)(json, err);
  }

  if (json && !suppressOutput) {
    console.log(JSON.stringify(jsonResult, null, _utils.JSON_SPACES));
  }

  return jsonResult;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21tYW5kQ2xhc3NlcyIsIk9iamVjdCIsImZyZWV6ZSIsIkRSSVZFUl9UWVBFIiwiRHJpdmVyQ29tbWFuZCIsIlBMVUdJTl9UWVBFIiwiUGx1Z2luQ29tbWFuZCIsInJ1bkV4dGVuc2lvbkNvbW1hbmQiLCJhcmdzIiwiY29uZmlnIiwianNvblJlc3VsdCIsImV4dGVuc2lvblR5cGUiLCJ0eXBlIiwiZXh0Q21kIiwiVHlwZUVycm9yIiwianNvbiIsInN1cHByZXNzT3V0cHV0IiwiQ29tbWFuZENsYXNzIiwiY21kIiwiZXhlY3V0ZSIsImVyciIsImVyckFuZFF1aXQiLCJjb25zb2xlIiwibG9nIiwiSlNPTiIsInN0cmluZ2lmeSIsIkpTT05fU1BBQ0VTIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2NsaS9leHRlbnNpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuaW1wb3J0IERyaXZlckNvbW1hbmQgZnJvbSAnLi9kcml2ZXItY29tbWFuZCc7XG5pbXBvcnQgUGx1Z2luQ29tbWFuZCBmcm9tICcuL3BsdWdpbi1jb21tYW5kJztcbmltcG9ydCB7RFJJVkVSX1RZUEUsIFBMVUdJTl9UWVBFfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHtlcnJBbmRRdWl0LCBKU09OX1NQQUNFU30gZnJvbSAnLi91dGlscyc7XG5cbmV4cG9ydCBjb25zdCBjb21tYW5kQ2xhc3NlcyA9IE9iamVjdC5mcmVlemUoXG4gIC8qKiBAdHlwZSB7Y29uc3R9ICovICh7XG4gICAgW0RSSVZFUl9UWVBFXTogRHJpdmVyQ29tbWFuZCxcbiAgICBbUExVR0lOX1RZUEVdOiBQbHVnaW5Db21tYW5kLFxuICB9KVxuKTtcblxuLyoqXG4gKiBSdW4gYSBzdWJjb21tYW5kIG9mIHRoZSAnYXBwaXVtIGRyaXZlcicgdHlwZS4gRWFjaCBzdWJjb21tYW5kIGhhcyBpdHMgb3duIHNldCBvZiBhcmd1bWVudHMgd2hpY2hcbiAqIGNhbiBiZSByZXByZXNlbnRlZCBhcyBhIEpTIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYXJncyAtIEpTIG9iamVjdCB3aGVyZSB0aGUga2V5IGlzIHRoZSBwYXJhbWV0ZXIgbmFtZSAoYXMgZGVmaW5lZCBpblxuICogZHJpdmVyLXBhcnNlci5qcylcbiAqIEB0ZW1wbGF0ZSB7aW1wb3J0KCcuLi9leHRlbnNpb24vbWFuaWZlc3QnKS5FeHRlbnNpb25UeXBlfSBFeHRUeXBlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vZXh0ZW5zaW9uL2V4dGVuc2lvbi1jb25maWcnKS5FeHRlbnNpb25Db25maWc8RXh0VHlwZT59IGNvbmZpZyAtIEV4dGVuc2lvbiBjb25maWcgb2JqZWN0XG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHJ1bkV4dGVuc2lvbkNvbW1hbmQoYXJncywgY29uZmlnKSB7XG4gIC8vIFRPRE8gZHJpdmVyIGNvbmZpZyBmaWxlIHNob3VsZCBiZSBsb2NrZWQgd2hpbGUgYW55IG9mIHRoZXNlIGNvbW1hbmRzIGFyZVxuICAvLyBydW5uaW5nIHRvIHByZXZlbnQgd2VpcmQgc2l0dWF0aW9uc1xuICBsZXQganNvblJlc3VsdCA9IG51bGw7XG4gIGNvbnN0IHtleHRlbnNpb25UeXBlOiB0eXBlfSA9IGNvbmZpZztcbiAgY29uc3QgZXh0Q21kID0gYXJnc1tgJHt0eXBlfUNvbW1hbmRgXTtcbiAgaWYgKCFleHRDbWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBDYW5ub3QgY2FsbCAke3R5cGV9IGNvbW1hbmQgd2l0aG91dCBhIHN1YmNvbW1hbmQgbGlrZSAnaW5zdGFsbCdgKTtcbiAgfVxuICBsZXQge2pzb24sIHN1cHByZXNzT3V0cHV0fSA9IGFyZ3M7XG4gIGlmIChzdXBwcmVzc091dHB1dCkge1xuICAgIGpzb24gPSB0cnVlO1xuICB9XG4gIGNvbnN0IENvbW1hbmRDbGFzcyA9IC8qKiBAdHlwZSB7RXh0Q29tbWFuZDxFeHRUeXBlPn0gKi8gKGNvbW1hbmRDbGFzc2VzW3R5cGVdKTtcbiAgY29uc3QgY21kID0gbmV3IENvbW1hbmRDbGFzcyh7Y29uZmlnLCBqc29ufSk7XG4gIHRyeSB7XG4gICAganNvblJlc3VsdCA9IGF3YWl0IGNtZC5leGVjdXRlKGFyZ3MpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBpbiB0aGUgc3VwcHJlc3Mgb3V0cHV0IGNhc2UsIHdlIGFyZSBjYWxsaW5nIHRoaXMgZnVuY3Rpb24gaW50ZXJuYWxseSBhbmQgc2hvdWxkXG4gICAgLy8ganVzdCB0aHJvdyBpbnN0ZWFkIG9mIHByaW50aW5nIGFuIGVycm9yIGFuZCBlbmRpbmcgdGhlIHByb2Nlc3NcbiAgICBpZiAoc3VwcHJlc3NPdXRwdXQpIHtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gICAgZXJyQW5kUXVpdChqc29uLCBlcnIpO1xuICB9XG5cbiAgaWYgKGpzb24gJiYgIXN1cHByZXNzT3V0cHV0KSB7XG4gICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoanNvblJlc3VsdCwgbnVsbCwgSlNPTl9TUEFDRVMpKTtcbiAgfVxuXG4gIHJldHVybiBqc29uUmVzdWx0O1xufVxuXG5leHBvcnQge3J1bkV4dGVuc2lvbkNvbW1hbmR9O1xuXG4vKipcbiAqIEB0ZW1wbGF0ZSB7aW1wb3J0KCdAYXBwaXVtL3R5cGVzJykuRXh0ZW5zaW9uVHlwZX0gRXh0VHlwZVxuICogQHR5cGVkZWYge0V4dFR5cGUgZXh0ZW5kcyBpbXBvcnQoJ0BhcHBpdW0vdHlwZXMnKS5Ecml2ZXJUeXBlID8gaW1wb3J0KCdAYXBwaXVtL3R5cGVzJykuQ2xhc3M8RHJpdmVyQ29tbWFuZD4gOiBFeHRUeXBlIGV4dGVuZHMgaW1wb3J0KCdAYXBwaXVtL3R5cGVzJykuUGx1Z2luVHlwZSA/IGltcG9ydCgnQGFwcGl1bS90eXBlcycpLkNsYXNzPFBsdWdpbkNvbW1hbmQ+IDogbmV2ZXJ9IEV4dENvbW1hbmRcbiAqL1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFTyxNQUFNQSxjQUFjLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBUCxDQUNOO0VBQ3BCLENBQUNDLHNCQUFELEdBQWVDLHNCQURLO0VBRXBCLENBQUNDLHNCQUFELEdBQWVDO0FBRkssQ0FETSxDQUF2Qjs7O0FBZ0JQLGVBQWVDLG1CQUFmLENBQW1DQyxJQUFuQyxFQUF5Q0MsTUFBekMsRUFBaUQ7RUFHL0MsSUFBSUMsVUFBVSxHQUFHLElBQWpCO0VBQ0EsTUFBTTtJQUFDQyxhQUFhLEVBQUVDO0VBQWhCLElBQXdCSCxNQUE5QjtFQUNBLE1BQU1JLE1BQU0sR0FBR0wsSUFBSSxDQUFFLEdBQUVJLElBQUssU0FBVCxDQUFuQjs7RUFDQSxJQUFJLENBQUNDLE1BQUwsRUFBYTtJQUNYLE1BQU0sSUFBSUMsU0FBSixDQUFlLGVBQWNGLElBQUssOENBQWxDLENBQU47RUFDRDs7RUFDRCxJQUFJO0lBQUNHLElBQUQ7SUFBT0M7RUFBUCxJQUF5QlIsSUFBN0I7O0VBQ0EsSUFBSVEsY0FBSixFQUFvQjtJQUNsQkQsSUFBSSxHQUFHLElBQVA7RUFDRDs7RUFDRCxNQUFNRSxZQUFZLEdBQXVDakIsY0FBYyxDQUFDWSxJQUFELENBQXZFO0VBQ0EsTUFBTU0sR0FBRyxHQUFHLElBQUlELFlBQUosQ0FBaUI7SUFBQ1IsTUFBRDtJQUFTTTtFQUFULENBQWpCLENBQVo7O0VBQ0EsSUFBSTtJQUNGTCxVQUFVLEdBQUcsTUFBTVEsR0FBRyxDQUFDQyxPQUFKLENBQVlYLElBQVosQ0FBbkI7RUFDRCxDQUZELENBRUUsT0FBT1ksR0FBUCxFQUFZO0lBR1osSUFBSUosY0FBSixFQUFvQjtNQUNsQixNQUFNSSxHQUFOO0lBQ0Q7O0lBQ0QsSUFBQUMsaUJBQUEsRUFBV04sSUFBWCxFQUFpQkssR0FBakI7RUFDRDs7RUFFRCxJQUFJTCxJQUFJLElBQUksQ0FBQ0MsY0FBYixFQUE2QjtJQUMzQk0sT0FBTyxDQUFDQyxHQUFSLENBQVlDLElBQUksQ0FBQ0MsU0FBTCxDQUFlZixVQUFmLEVBQTJCLElBQTNCLEVBQWlDZ0Isa0JBQWpDLENBQVo7RUFDRDs7RUFFRCxPQUFPaEIsVUFBUDtBQUNEIn0=